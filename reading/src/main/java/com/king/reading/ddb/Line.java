// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.king.reading.ddb;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class Line {

	@TarsStructProperty(order = 0, isRequire = true)
	public String original = "";
	@TarsStructProperty(order = 1, isRequire = true)
	public String translation = "";
	@TarsStructProperty(order = 2, isRequire = true)
	public String encryptSoundURL = "";
	@TarsStructProperty(order = 3, isRequire = true)
	public Rect frame = null;

	public String getOriginal() {
		return original;
	}

	public void setOriginal(String original) {
		this.original = original;
	}

	public String getTranslation() {
		return translation;
	}

	public void setTranslation(String translation) {
		this.translation = translation;
	}

	public String getEncryptSoundURL() {
		return encryptSoundURL;
	}

	public void setEncryptSoundURL(String encryptSoundURL) {
		this.encryptSoundURL = encryptSoundURL;
	}

	public Rect getFrame() {
		return frame;
	}

	public void setFrame(Rect frame) {
		this.frame = frame;
	}

	public Line() {
	}

	public Line(String original, String translation, String encryptSoundURL, Rect frame) {
		this.original = original;
		this.translation = translation;
		this.encryptSoundURL = encryptSoundURL;
		this.frame = frame;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(original);
		result = prime * result + TarsUtil.hashCode(translation);
		result = prime * result + TarsUtil.hashCode(encryptSoundURL);
		result = prime * result + TarsUtil.hashCode(frame);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof Line)) {
			return false;
		}
		Line other = (Line) obj;
		return (
			TarsUtil.equals(original, other.original) &&
			TarsUtil.equals(translation, other.translation) &&
			TarsUtil.equals(encryptSoundURL, other.encryptSoundURL) &&
			TarsUtil.equals(frame, other.frame) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(original, 0);
		_os.write(translation, 1);
		_os.write(encryptSoundURL, 2);
		_os.write(frame, 3);
	}

	static Rect cache_frame;
	static { 
		cache_frame = new Rect();
	}

	public void readFrom(TarsInputStream _is) {
		this.original = _is.readString(0, true);
		this.translation = _is.readString(1, true);
		this.encryptSoundURL = _is.readString(2, true);
		this.frame = (Rect) _is.read(cache_frame, 3, true);
	}

}

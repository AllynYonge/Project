// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.king.reading.ddb;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class Page {

	@TarsStructProperty(order = 0, isRequire = true)
	public int pageNumber = 0;
	@TarsStructProperty(order = 1, isRequire = true)
	public String encryptImageURL = "";
	@TarsStructProperty(order = 2, isRequire = true)
	public java.util.List<Line> lines = null;

	public int getPageNumber() {
		return pageNumber;
	}

	public void setPageNumber(int pageNumber) {
		this.pageNumber = pageNumber;
	}

	public String getEncryptImageURL() {
		return encryptImageURL;
	}

	public void setEncryptImageURL(String encryptImageURL) {
		this.encryptImageURL = encryptImageURL;
	}

	public java.util.List<Line> getLines() {
		return lines;
	}

	public void setLines(java.util.List<Line> lines) {
		this.lines = lines;
	}

	public Page() {
	}

	public Page(int pageNumber, String encryptImageURL, java.util.List<Line> lines) {
		this.pageNumber = pageNumber;
		this.encryptImageURL = encryptImageURL;
		this.lines = lines;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(pageNumber);
		result = prime * result + TarsUtil.hashCode(encryptImageURL);
		result = prime * result + TarsUtil.hashCode(lines);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof Page)) {
			return false;
		}
		Page other = (Page) obj;
		return (
			TarsUtil.equals(pageNumber, other.pageNumber) &&
			TarsUtil.equals(encryptImageURL, other.encryptImageURL) &&
			TarsUtil.equals(lines, other.lines) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(pageNumber, 0);
		_os.write(encryptImageURL, 1);
		_os.write(lines, 2);
	}

	static java.util.List<Line> cache_lines;
	static { 
		cache_lines = new java.util.ArrayList<Line>();
		Line var_5 = new Line();
		cache_lines.add(var_5);
	}

	public void readFrom(TarsInputStream _is) {
		this.pageNumber = _is.read(pageNumber, 0, true);
		this.encryptImageURL = _is.readString(1, true);
		this.lines = (java.util.List<Line>) _is.read(cache_lines, 2, true);
	}

}
